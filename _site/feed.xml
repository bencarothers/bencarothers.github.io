<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ben Carothers</title>
    <description></description>
    <link>http://bencarothers.me/</link>
    <atom:link href="http://bencarothers.me/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 17 Jul 2015 13:51:38 -0400</pubDate>
    <lastBuildDate>Fri, 17 Jul 2015 13:51:38 -0400</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Regex For The Masses</title>
        <description>&lt;p&gt;
Regular expressions, sequences of characters that define patterns, are widely applicable and strangely controversial.
They can definitely be fickle and buggy. Often because they&#39;re so terse and condensed regular expressions are 
less readable than equivalent counterparts. However, they&#39;re a fundamental aspect of modern software and
for that reason alone simple regular expressions are a crucial part of any developers skill base.
&lt;/p&gt;

&lt;h2 class=&quot;section-heading&quot;&gt;Everyone Searches.&lt;/h2&gt;

&lt;p&gt;
Cory Doctorow once wrote that regular expressions should be included as a core part of our education -- along side
word processors and PowerPoint. Though I want to stress that I love regex, I think that this is a bogus.
&lt;/p&gt;

&lt;p&gt;
Foundationally, computer programs are built around the foundation of manipulating characters -- searching, matching,
and acting according to what was found. For this reason a tool such as regular expressions can be invaluable for 
developers, but the time spent learning and creating regex might outweigh the benefits for your average searcher.
&lt;/p&gt;

&lt;h2 class=&quot;section-heading&quot;&gt;Daily Use&lt;/h2&gt;

&lt;h4 id=&quot;matching-an-email&quot;&gt;Matching an Email&lt;/h4&gt;

&lt;p&gt;
^([a-z0-9_\.-]+)@([\da-z\.-]+)\.([a-z\.]{2,6})$
&lt;/p&gt;
&lt;p&gt;
There&#39;s a lot of controversy about the correct regex for matching an email address, but there&#39;s no doubt that this could 
be useful for anyone. Searching a document for multiple addresses could be done instantly.
&lt;/p&gt;
&lt;p&gt;
As for the make up of the pattern: 
First we look for any number of valid symbols followed by an @ symbol 
then similarly any number of symbols followed by a period 
and finally 2 to 6 characters
&lt;/p&gt;
&lt;p&gt;
The trade off here between complexity and accuracy wouldn&#39;t be an issue for everyday usage.
&lt;/p&gt;

&lt;h4 id=&quot;matching-a-phone-number&quot;&gt;Matching a Phone Number:&lt;/h4&gt;

&lt;p&gt;
^[\d]{3,}$
&lt;/p&gt;
&lt;p&gt;
Much like matching emails finding phone numbers is another dead simple way that regex can be incredibly useful.
This pattern is as simple as finding 3 or more digit 
&lt;/p&gt;
&lt;p&gt;
This is a great example of a regex that is absolutely inefficient and inexact that would be perfectly ok for an
average user looking for phone numbers.
&lt;/p&gt;
&lt;p&gt;
Matching phone numbers can get incredibly complex which is exactly why I don&#39;t think non-developers need a super strong
foundation in regular expressions, but rather the bare minimum
&lt;/p&gt;

&lt;h4 id=&quot;matching-white-space&quot;&gt;Matching White Space:&lt;/h4&gt;

&lt;p&gt;
[^\S\r\n]{2,}
&lt;/p&gt;
&lt;p&gt;
Here is a pattern that eliminates some of the frustrations in cleaning up text documents.
&lt;/p&gt;
&lt;p&gt;
Simply match 2 or more white space characters and then replace them with one. 
Dead simple and really useful.
&lt;/p&gt;

&lt;p&gt;
Regular Expressions are everywhere. I think they&#39;re useful for everyone -- probably more so for nerds.
&lt;/p&gt;
</description>
        <pubDate>Wed, 15 Jul 2015 23:00:00 -0400</pubDate>
        <link>http://bencarothers.me/2015/07/15/Regex-For-The-Masses/</link>
        <guid isPermaLink="true">http://bencarothers.me/2015/07/15/Regex-For-The-Masses/</guid>
        
        
      </item>
    
      <item>
        <title>Gardening with Pi</title>
        <description>&lt;p&gt;
I love gardening for so many reasons -- good food, pretty landscaping, and a reason to get up and take a break from my work.
Though, Living in suburban Southern Florida can make the process a little tougher than I think should be.
&lt;/p&gt;

&lt;p&gt;
Limited to a small patch of brick, I made some adjustments to the conventional home garden that make the process both less stressful
and also a bit more sustainable.
&lt;/p&gt;

&lt;p&gt;
The sun is hot - Really, painfully hot - and vegetables don&#39;t grow in concrete. I started planning out a couple of raised
beds that would be far enough off the ground to so that they would be protected from the heat stored in the brick.
I ended up with two four feet by two feet planters -- both with about six cubic feet of soil and sitting on three feet legs.
I was set for my first growing season until I realized just how hot the sun in Florida really is.
&lt;/p&gt;

&lt;h2 class=&quot;section-heading&quot;&gt;Water, please.&lt;/h2&gt;

&lt;p&gt;
Keeping moisture levels optimal was becoming a full time endeavor -- especially because the soil was only 8 inches deep.
I started researching watering practices in arid environments when I happened upon the practice of drip irrigation.
&lt;/p&gt;

&lt;p&gt;
Though the technique dates back thousands of years, today droplets of water are applied directly to the base of your plants
through lines of selectively perforated tubing. Coupled with a pressure regulator and filter this system of tubing is one of
the most efficient systems of watering available. It was working really well, but I still needed to water every couple of hours,
which was a problem when I was out of the house.
&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/drip.jpg&quot; alt=&quot;drip irrigation&quot; /&gt;
&lt;/a&gt;
&lt;span class=&quot;caption text-muted&quot;&gt;Lines of drip tubing&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
This was when I came upon the Open Sprinkler Pi. This small micro-controller interfaces with a Raspberry Pi allowing it to control 
common sprinkler valves.
&lt;/p&gt;

&lt;p&gt;
The process was pretty simple. First flash an image provided by the Open Sprinkler to the Pi that comes with pre-installed programs
to control your valves in any way imaginable. Then, connect the Pi to the OSPI and run the necessary wires to the valve -- I opted 
for a drip valve simply because my drip system had already been put in place. Finally, whatever program you decide to use is available
through port forwarding and your garden can be watered from anywhere with internet access. 
&lt;/p&gt;

&lt;p&gt;
So far the system is working beautifully. I opted to write a program that scrapes a Twitter account and parses watering commands because
, frankly, the applications provided had more features than I needed.  
&lt;/p&gt;

&lt;p&gt;
I do still like to water manually so I can see how things are growing, but it&#39;s nice to be able to be away from home without having to
worry about thirsty plants. Plus, the system is highly extensible so it leaves endless opportunity to explore in the future.
&lt;/p&gt;

</description>
        <pubDate>Mon, 13 Jul 2015 23:10:00 -0400</pubDate>
        <link>http://bencarothers.me/2015/07/13/Gardening-With-Pi/</link>
        <guid isPermaLink="true">http://bencarothers.me/2015/07/13/Gardening-With-Pi/</guid>
        
        
      </item>
    
  </channel>
</rss>
